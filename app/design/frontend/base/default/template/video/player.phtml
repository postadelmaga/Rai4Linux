<div id="app">

    <div class="w3-container w3-black">
        <h3>{{title}}</h3>
    </div>

    <template id="player">
        <div class="w3-container w3-black">
            <div style="margin: 0% 12%">
                <!--        <img src="img/tv.png" alt="Rai Tv" style="max-width: 100%">-->
                <video id="videoElement" style="max-width: 100%" :src="src_current"/>
            </div>
        </div>
    </template>

    <div class="w3-bar w3-mobile w3-border w3-round channel_list">
        <channels inline-template v-for="(channel, index) in channels"
                  :key="index"
                  :id="index"
                  :title="channel.title"
                  ref="channelscomp">
            <a class="w3-bar-item w3-button" :id="id" @click="click">{{title}}</a>
        </channels>
    </div>

    <template id="daylist" class="w3-container day" v-for="day in days" :day="day">
        <header class="w3-container w3-blue">
            <h1>{{day}}</h1>
        </header>
        <template id="program" v-for="program in day.programs" :program="program">
            <div class="w3-card-4 program" style="display: inline-block">
                <header class="w3-container w3-blue">
                    <h5>TEST INPUT</h5>
                </header>
                <div class="w3-container">
                    LINK
                </div>
                <footer class="w3-container w3-blue">
                    <h5>Footer</h5>
                </footer>
            </div>
        </template>
    </template>

</div>

<script>
    var data = JSON.parse('<?php echo $this->getJsonConfig() ?>');
    data.title = '';
    var vuePlayer = new Vue({
        data: data,
        beforeMount: function () {
            this.$on('switch-channel', ch_id => {
                this.setCurrentChannel(ch_id);
                console.log(ch_id);
            });
        },
        created: function () {
        },
        mounted: function () {
            this._initPlayer();
            this.setCurrentChannel(1);
        },
        methods: {

            getCurrentChannel() {
                return this.$ref.channelscomp.current_id;
            },

            setCurrentChannel(id) {
                this.component('channelscomp').current_id = 1;
                this.$ref.channelscomp.current_id = 1;
                this.loadDayChannel;
            }

            getChannelById: function (ch_id) {
                var i;
                for (i in this.channels) {
                    if (this.channels[i].id == ch_id) {
                        return this.channels[i];
                    }
                }
            },

            loadDayChannel: function (day, ch_id) {
                var url = this.ajaxurl;
                var channel = this.getChannelById(ch_id);

                if (channel.days.programs.length == 0) {
                    $.ajax({
                        url: url,
                        method: 'POST',
                        data: {day: day, ch: ch_id},
                        success: function (data) {
                            try {
                                var result = tryParseJSON(data);
                                if (result.success) {
                                    return {date: day, programs: result.programs};
                                }
                                else {
                                    jQuery('body').append(jQuery('<div>').html(data));
                                    return null;
                                }
                            } catch (e) {
                                jQuery('body').append(jQuery('<div>').html(data));
                                return null;
                            }

                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
            }


            loadChannels: function () {
                for (var i in this.channels) {
                    this.loadDayChannel(this.channels[c]);
                }
            },

            _initPlayer() {
                this.player = new MediaElementPlayer('videoElement', {
                    /**
                     * YOU MUST SET THE TYPE WHEN NO SRC IS PROVIDED AT INITIALISATION
                     * (This one is not very well documented.. If one leaves the type out, the success event will never fire!!)
                     **/
                    type: ["video/mp4"],
                    features: ['playpause', 'progress', 'current', 'duration', 'tracks', 'volume'],
                    mediaElementInitialized: false,
                    //more options here..

                    success: function (mediaElement, domObject) {
                        this.mediaElementInitialized = true;
                    },
                    error: function (e) {
                        alert(e);
                    },

                });
            }
        },

    });
    vuePlayer.$mount('#app');
</script>
